// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  createdAt     DateTime       @default(now())
  name          String
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  cover         String?
  about         String         @default("")
  videos        Video[]
  videosLikes   VideoLike[]
  comments      Comment[]
  subscribers   Subscription[] @relation("subscriber")
  subscribedTo  Subscription[] @relation("subscribedTo")
  views         View[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId
}

model Video {
  id          String      @id @default(cuid()) @map("_id")
  createdAt   DateTime    @default(now())
  title       String
  description String?
  url         String
  thumbnail   String
  numOfViews  Int         @default(0)
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  comments    Comment[]
  videoLikes  VideoLike[]
  views       View[]
}

model VideoLike {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  like      Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId
}

model Subscription {
  id             String   @id @default(cuid()) @map("_id")
  createdAt      DateTime @default(now())
  subscriber     User     @relation("subscriber", fields: [subscriberId], references: [id])
  subscriberId   String   @db.ObjectId
  subscribedTo   User     @relation("subscribedTo", fields: [subscribedToId], references: [id])
  subscribedToId String   @db.ObjectId
}

model View {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String   @db.ObjectId
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
